・この実験では2つの関数を用意した。（自分作る関数ではない）
用意した関数の仕様は以下の通りである。

1.行列を作る関数
void make_matrix(unsigned int size, int flag, double **a, double **b, unsigned int number)
size : 行列サイズ
flag : 行列生成に関する指示（今年度は全員1を入れてください)
a : 行列Aを示すポインタ
b : 行列Bを示すポインタ
number : 学生番号
動作: size に行列サイズ、number に学生番号を入れてこの関数を呼び出すと、
a, b が示す配列に行列の値が代入される。
返り値：なし

2.計算結果をチェックする関数
void check_matrix(unsigned int size, double **c, unsigned int number)
size : 行列サイズ
c : 計算結果を格納するポインタ
number : 学生番号
動作: size に行列サイズ、number に学生番号をいれてこの関数を呼び出すと、
cが示す配列の値が正しいか調べ、その結果を表示する。
返り値：なし

・用意したプログラム
main.c
プログラムの雛形。引数に行列サイズを入れて実行する仕様になっている。
（勝手に仕様を変えないこと。）

jikken.h
ライブラリを利用するためのヘッダファイル。main.c からインクルードする。

・コンパイル方法（逐次の場合の例）
実験で用意した関数を使うために　-L. -ljikken をつける。
（例）gcc -o jikken main.c -L. -ljikken

・実験用プログラムの作成及び計画書の作成
計画書提出日までに、上記の仕様に合わせたプログラムと文末に示したチェック項目を参考にして計画書及び実験プログラムを自宅で作成し、提出する。プログラムの提出はmanaba上に用意する。計画書は、結果の前までのレポートを書く。

その際、計画書のアルゴリズム2とプログラムで同じ並列化が行われているか確認する。
自宅でプログラムの動作チェックする際は、コマンドライン上から行列サイズを10000まで複数のサイズと多めのスレッド数でで実行し、正しく動作しているか確認すること。特定のサイズで動かない場合はプログラムが間違っているので見直すこと。

・実験およびレポート作成の注意事項
実験の確認では、いくつかチェックポイントがあります。
1.逐次プログラムの動作確認、
2.並列化プログラムの動作確認
3.時刻計測が終了した段階
でチェックを受けること。

時間計測は、並列化しないバージョンと並列化したバージョンのプログラムを作成して、各々時間を計測する。
並列化したバージョンはスレッド数を1から8まで変化させて時間を測る。計算する行列のサイズは、処理時間が適正に図れるサイズを選び、グラフが書ける分だけ複数サイズ計測すること。計算結果が正しいかのチェックは、最適化オプション-O3をつけた場合とつけない場合で比較すること。（結果は同じになるはず）結果が正しいとTAのチェックを受けた後、時間計測は最適化オプションをつけた状態で計測する。


考察は最低限以下の項目について記述すること。
(1) スレッド数が2の場合、行列の掛け算を行う箇所がどのように実行されたのか、
スレッドごとにフローチャートを用いて、処理や変数がどのように分割されるかを
含め説明すること。
(2) スレッド数が2のとき処理時間が半分にならないはずである。この理由を
アルゴリズムの観点から述べること。
(3) 行列サイズが変化すると処理時間がどうなるか（行列サイズと処理時間の関係）の
理論を述べ、スレッド数ごとに実験結果と比較し、そこから何が言えるのか、
スレッド数の違いによる変化を考慮して考察を述べること。
(4) スレッド数が変化すると処理時間がどうなるかについて、行列サイズごとに
理論と実験結果を比較し、そこから何が言えるのか、行列サイズの違いによる影響も
含め考察を述べること。

最後に付録として書くこと。その他。
main.c を演習室で印刷して、当日提出してもらうので、実験レポートに添付しないこと。
main.c の内容については、計画書のアルゴリズムを元に説明するとともに、利用した
変数についてどのように定義して利用するのか述べること。説明は計算をしているところだけでよい。


以下計画書のチェック項目
------------------------------------------------

□目的：実験の目的について簡潔に述べられているか。
□理論：行列積の理論について理論式を元に書いてあるか。
□アルゴリズム1：理論式をどのように計算機で計算するかアルゴリズムが書いてあるか。　特に、シグマ計算をどのようにプログラムであらわすのか、数式をどのようにプログラム中の変数で表すのかのべること。
□アルゴリズム1：行列積に出てくる全部のループ1つ１つについて並列化可の可否とその理由が示されているか。計算中の各forループについて、並列化可能、並列化不可能、条件付で並列化可能に分け、なぜこのように分類したのか、条件つきの場合はその条件も含めてのべること。
□アルゴリズム1：上で示した各ループについて、実際のプログラムではどのように対応させるか。並列化可能（条件付も含む）なループに対し、並列化する、並列化可能だけど並列化しないに分けて、それぞれ理由をのべること。
□アルゴリズム2：アルゴリズム1の並列化を踏まえ、プログラムがどのように並列実行されるか示されているか。OpenMPの指示子について全て述べているか。
□プログラム：プログラムが並列化の理論通りにないるか確認する。

以下実験レポートのチェック項目
------------------------------------------------
□結果：実験の手順が書いてあるか。
□結果：実験環境が書いてあるか。
□結果：グラフは、何と何を比較するのか考えて、横軸、縦軸が正しく取られているか。
□結果：表には表番号、表題、グラフには図番号、図題が書かれているか。
□考察：考察は、項目ごとに節を作り、項目ごとに書いてあるか。節の題目はあるか。
□考察：考察1は書かれているか。private指示節の役割（処理やデータの分割がどうなったのか）がわかるように述べられているか。
□考察：考察2は、理論と実験値を比較し、その結果から考察が書かれているか。ちなみに、問題サイズが大きくなると、スレッド生成に関する時間は無視できる程度になります。
□考察：考察3は、理論と実験値を比較し、その結果から考察が書かれているか。問題サイズに対する処理時間の変化についてスレッド毎に理論値との差を求め、スレッド数の変化でこの差がどうなるのか調べ考察する。
□考察：考察4は、理論と実験値を比較し、その結果から考察が書かれているか。必要ならハードウェアの観点から考察する、
□付録：プログラムの説明があるか。
